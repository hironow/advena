[tools]
node = "lts"
python = "3.13"

[vars]
GOOGLE_CLOUD_LOCATION = "us-central1"
GOOGLE_CLOUD_PROJECT = "advena-dev"
ARTIFACT_REGISTRY_REPOSITORY = "advena"
BACKEND_IMAGE_NAME = "backend-advena"
FRONTEND_IMAGE_NAME = "frontend-advena"
FIREBASE_BUCKET_NAME = "advena-dev.firebasestorage.app"

[tasks]
c = "code vs.code-workspace"
g = "gcloud config configurations activate advena-dev"


# firebase tasks
[tasks."f"]
description = "Use Firebase default project"
run = "firebase use default"
dir = "frontend/web/"
hide = true

[tasks."f:emulator"]
description = "Start Firebase Emulator Suite"
run = "firebase emulators:start --project=local"
depends = ["f"]
dir = "frontend/web/"

[tasks."f:deploy"]
description = "Deploy to Firebase Suite"
run = "firebase deploy"
depends = ["f"]
dir = "frontend/web/"

[tasks."f:deploy_cors"]
description = "Deploy to Firebase Storage's CORS configuration"
run = "gcloud storage buckets update gs://{{vars.FIREBASE_BUCKET_NAME}} --cors-file=./cors.json"
depends = ["f"]
dir = "frontend/web/"
# see: https://cloud.google.com/storage/docs/cross-origin

[tasks."f:check_cors"]
description = "Check Firebase Storage's CORS configuration"
run = "gcloud storage buckets describe gs://{{vars.FIREBASE_BUCKET_NAME}} --format='default(cors_config)'"
depends = ["f"]
dir = "frontend/web/"


# gcloud tasks
[tasks."g:login"]
description = "Login to gcloud as application default credentials"
run = "gcloud auth application-default login"

[tasks."g:create_repo"]
description = "Create a repository in Google Cloud Artifact Registry (only once)"
depends = ["g"]
run = """
gcloud artifacts repositories create {{vars.ARTIFACT_REGISTRY_REPOSITORY}} \
    --repository-format=docker \
    --location={{vars.GOOGLE_CLOUD_LOCATION}} \
    --description="Docker repository for {{vars.ARTIFACT_REGISTRY_REPOSITORY}} images"
"""
hide = true

[tasks."g:config_repo"]
description = "Configure a repository in Google Cloud Artifact Registry (only once)"
depends = ["g"]
run = """
gcloud auth configure-docker {{vars.GOOGLE_CLOUD_LOCATION}}-docker.pkg.dev
"""
# see: https://cloud.google.com/artifact-registry/docs/docker/store-docker-container-images#auth
hide = true


# backend dir tasks
[tasks."be:dev"]
run = "dotenvx run -- uv run python -m uvicorn src.index:app --reload"
dir = "backend/genai/"

[tasks."be:update"]
run = "uv lock --upgrade && uv sync"
dir = "backend/genai/"

[tasks."be:format"]
run = "uv run ruff check --select I --fix && ruff format"
dir = "backend/genai/"

[tasks."be:test"]
run = "uv run pytest"
dir = "backend/genai/"

[tasks."be:build"]
description = "Build a docker image"
run = ["docker build --platform linux/amd64 -t {{vars.BACKEND_IMAGE_NAME}} ."]
dir = "backend/genai/"

[tasks."be:check_dockerignore"]
description = "Check a docker image files (use tree command, exclude .venv and .uv)"
run = """docker run --platform=linux/amd64 --rm {{vars.BACKEND_IMAGE_NAME}}:latest sh -c "\
    apt-get update && apt-get install -y tree && tree -I \\\"\\.venv|\\.uv\\\" -a -f /app"
"""

[tasks."be:push"]
description = "Push a docker image to Google Cloud Artifact Registry"
depends = ["g"]
run = """
#!/usr/bin/env bash
set -e

# Get branch and commit information
BRANCH=$(git symbolic-ref --short HEAD)
COMMIT=$(git describe --tags --always)

# Construct the image name
# ex. <location>-docker.pkg.dev/<project-name>/<repo-name>/<image-name>:main-1234567
NAME="{{vars.GOOGLE_CLOUD_LOCATION}}-docker.pkg.dev/{{vars.GOOGLE_CLOUD_PROJECT}}/{{vars.ARTIFACT_REGISTRY_REPOSITORY}}/{{vars.BACKEND_IMAGE_NAME}}:${BRANCH}-${COMMIT}"

# Display and push the image
echo "Deploying ${NAME}"
docker tag {{vars.BACKEND_IMAGE_NAME}}:latest ${NAME}
docker push ${NAME}

# Generate Google Cloud Console URL
# ex. https://console.cloud.google.com/artifacts/docker/<project-name>/<location>/<repo-name>/<image-name>?project=<project-name>
CONSOLE_URL="https://console.cloud.google.com/artifacts/docker/{{vars.GOOGLE_CLOUD_PROJECT}}/{{vars.GOOGLE_CLOUD_LOCATION}}/{{vars.ARTIFACT_REGISTRY_REPOSITORY}}/{{vars.BACKEND_IMAGE_NAME}}?project={{vars.GOOGLE_CLOUD_PROJECT}}"
echo "ðŸ”— Access the repository here: ${CONSOLE_URL}"
"""


# frontend dir tasks
[tasks."fe:dev"]
run = "dotenvx run -- pnpm run dev"
dir = "frontend/web/"

[tasks."fe:update"]
run = "pnpm update"
dir = "frontend/web/"

[tasks."fe:format"]
run = "pnpm run format"
dir = "frontend/web/"

[tasks."fe:test"]
run = "pnpm run test"
dir = "frontend/web/"

[tasks."fe:build"]
description = "Build a docker image"
run = ["docker build --platform linux/amd64 -t {{vars.FRONTEND_IMAGE_NAME}} ."]
dir = "frontend/web/"

[tasks."fe:check_dockerignore"]
description = "Check a docker image files (use tree command, exclude node_modules and .next)"
run = """docker run --platform=linux/amd64 --rm {{vars.FRONTEND_IMAGE_NAME}}:latest sh -c "\
    apk add --no-cache tree && tree -I \\\"node_modules|\\.next\\\" -a -f /app"
"""

[tasks."fe:push"]
description = "Push a docker image to Google Cloud Artifact Registry"
depends = ["g"]
run = """
#!/usr/bin/env bash
set -e

# Get branch and commit information
BRANCH=$(git symbolic-ref --short HEAD)
COMMIT=$(git describe --tags --always)

# Construct the image name
# ex. <location>-docker.pkg.dev/<project-name>/<repo-name>/<image-name>:main-1234567
NAME="{{vars.GOOGLE_CLOUD_LOCATION}}-docker.pkg.dev/{{vars.GOOGLE_CLOUD_PROJECT}}/{{vars.ARTIFACT_REGISTRY_REPOSITORY}}/{{vars.FRONTEND_IMAGE_NAME}}:${BRANCH}-${COMMIT}"

# Display and push the image
echo "Deploying ${NAME}"
docker tag {{vars.FRONTEND_IMAGE_NAME}}:latest ${NAME}
docker push ${NAME}

# Generate Google Cloud Console URL
# ex. https://console.cloud.google.com/artifacts/docker/<project-name>/<location>/<repo-name>/<image-name>?project=<project-name>
CONSOLE_URL="https://console.cloud.google.com/artifacts/docker/{{vars.GOOGLE_CLOUD_PROJECT}}/{{vars.GOOGLE_CLOUD_LOCATION}}/{{vars.ARTIFACT_REGISTRY_REPOSITORY}}/{{vars.FRONTEND_IMAGE_NAME}}?project={{vars.GOOGLE_CLOUD_PROJECT}}"
echo "ðŸ”— Access the repository here: ${CONSOLE_URL}"
"""
